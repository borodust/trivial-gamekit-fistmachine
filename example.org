#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:lisp :results "output silent"
#+PROPERTY: header-args:glsl :results "none"
* trivial-gamekit-fistmachine Example

Example demonstrating how to use =trivial-gamekit-fistmachine= system.

** Preparations

Lets load all required systems for our example to work.

#+BEGIN_SRC lisp :eval yes
  (ql:quickload '(trivial-gamekit trivial-gamekit-fistmachine))
#+END_SRC

Also lets define a package we will evaluate our code in.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:defpackage :trivial-gamekit.fistmachine.example
    (:use :cl)
    (:export #:run))
#+END_SRC

** The Code

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defclass loading-screen ()
    ((started-at :initform nil)))


  (defmethod gamekit.fistmachine:initialize-state ((this loading-screen) &key)
    (with-slots (started-at) this
      (setf started-at (bodge-util:real-time-seconds))))


  (defmethod gamekit:act ((this loading-screen))
    (with-slots (started-at) this
      (when (> (- (bodge-util:real-time-seconds) started-at) 3)
        (gamekit.fistmachine:transition-to 'main-menu))))


  (defmethod gamekit:draw ((this loading-screen))
    (with-slots (selected) this
      (gamekit:with-pushed-canvas ()
        (gamekit:translate-canvas 300 400)
        (gamekit:scale-canvas 2 2)
        (gamekit:draw-text "LOADING" (gamekit:vec2 0 0))
        (let* ((amplitude 35)
               (x-coord (* amplitude (cos (* (bodge-util:real-time-seconds) 3)))))
          (gamekit:draw-circle (gamekit:vec2 (+ x-coord 29) -10) 2.5
                               :fill-paint (gamekit:vec4 0 0 0 1))))))
#+END_SRC

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defclass main-menu ()
    ((selected :initform 0)))

  (defparameter *options* #("START" "QUIT"))

  (defmethod gamekit.fistmachine:initialize-state ((this main-menu) &key)
    (with-slots (selected) this
      (gamekit:bind-button :down :pressed
                           (lambda ()
                             (setf selected (mod (1+ selected) (length *options*)))))
      (gamekit:bind-button :up :pressed
                           (lambda ()
                             (setf selected (mod (1- selected) (length *options*)))))
      (gamekit:bind-button :enter :pressed
                           (lambda ()
                             (cond
                               ((= selected 0)
                                (gamekit.fistmachine:transition-to 'loading-screen))
                               ((= selected 1)
                                (gamekit:stop)))))))


  (defmethod gamekit.fistmachine:discard-state ((this main-menu))
    (gamekit:bind-button :down :pressed nil)
    (gamekit:bind-button :up :pressed nil)
    (gamekit:bind-button :enter :pressed nil))


  (defmethod gamekit:draw ((this main-menu))
    (with-slots (selected) this
      (gamekit:with-pushed-canvas ()
        (gamekit:scale-canvas 2 2)
        (loop for text across *options*
              for i from 0
              do (gamekit:draw-text (if (= i selected)
                                        (format nil "~A~4T~A" "=>" text)
                                        (format nil "~4T~A" text))
                                    (gamekit:vec2 140 (+ 130 (- (* i 20)))))))))

#+END_SRC

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (gamekit:defgame fistmachine-example (gamekit.fistmachine:fistmachine) ()
    (:viewport-title "FistMachine Example")
    (:default-initargs :initial-state 'loading-screen))
#+END_SRC

Next we define and export a function to run our example.
#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defun run ()
    (gamekit:start 'fistmachine-example))
#+END_SRC

And run it!
#+BEGIN_SRC lisp :eval on
  (trivial-gamekit.fistmachine.example:run)
#+END_SRC

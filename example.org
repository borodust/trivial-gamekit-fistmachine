#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:lisp :results "output silent"
#+PROPERTY: header-args:glsl :results "none"
* trivial-gamekit-fistmachine Example

Example demonstrates how to use =trivial-gamekit-fistmachine= system.

This =trivial-gamekit= plugin helps to manage game states and transitions
between them. This is very handy for simple games, because you would certainly
have a few clear and distinct states. E.g., those could be a loading screen
(possibly animated), a main menu, maybe a pause menu, levels and an end-game
screen. You would also probably have transitions like =loading screen= -> =main
menu= -> =level= -> maybe =pause menu= -> =level= -> maybe =next level= ->
=end-game screen=.

=trivial-gamekit-fistmachine= allows you to use any class as a state class and
exports =#'transition-to= function to jump between those states. =fistmachine=
redirects all main =gamekit= instance functions like =#'draw=, =#'act= or
=#'notice-resources= onto instance of your state class so you can switch
behavior of your game with little effort by transitioning into required state.

** Preparations

Lets load all required systems for our example to work.

#+BEGIN_SRC lisp :eval yes
  (ql:quickload '(trivial-gamekit trivial-gamekit-fistmachine))
#+END_SRC

Also lets define a package we will evaluate our code in.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:defpackage :trivial-gamekit.fistmachine.example
    (:use :cl)
    (:export #:run))
#+END_SRC

** States

In this particular example, we will have two states and transition from one into
another.

**** Loading screen

First we define a loading screen state. Many games has it - we can load any
initial resources while keep users entertained with a vid or an animated
something.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defclass loading-screen ()
    ((started-at :initform nil)))
#+END_SRC

We don't have anything particular to load, so we will just wait a few seconds
before transitioning into our next state - main menu.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defmethod gamekit:post-initialize ((this loading-screen) &key)
    (with-slots (started-at) this
      (setf started-at (bodge-util:real-time-seconds))))

  (defmethod gamekit:act ((this loading-screen))
    (with-slots (started-at) this
      (when (> (- (bodge-util:real-time-seconds) started-at) 3)
        ;; if enough seconds passed since we reached current state
        ;; transition to main-menu
        (gamekit.fistmachine:transition-to 'main-menu))))
#+END_SRC

A little animated screen will let our users know we are still alive and well.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defmethod gamekit:draw ((this loading-screen))
    (gamekit:with-pushed-canvas ()
      (gamekit:translate-canvas 300 400)
      (gamekit:scale-canvas 2 2)
      (gamekit:draw-text "LOADING" (gamekit:vec2 0 0))
      (let* ((amplitude 35)
             (x-coord (* amplitude (cos (* (bodge-util:real-time-seconds) 3)))))
        (gamekit:draw-circle (gamekit:vec2 (+ x-coord 29) -10) 2.5
                             :fill-paint (gamekit:vec4 0 0 0 1)))))
#+END_SRC

**** Main menu

Our loading must transition into something - that would be a main menu with two
options.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defparameter *options* #("START" "QUIT"))

  (defclass main-menu ()
    ((selected :initform 0)))
#+END_SRC

We are not making a game here, so "Start" option would just throw us back to
loading screen. And "Quit" will stop the example.

We bind =:up= / =:down= arrow keys to switch between options and =:enter= key to
perform selected action.

=#'gamekit:post-initialize= is invoked when the state is reached and an instance
of a state is initialized. Here we can put anything our state requires - acquire
resources, bind input or maybe play audio.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defmethod gamekit.fistmachine:post-initialize ((this main-menu) &key)
    (with-slots (selected) this
      (gamekit:bind-button :down :pressed
                           (lambda ()
                             (setf selected (mod (1+ selected) (length *options*)))))
      (gamekit:bind-button :up :pressed
                           (lambda ()
                             (setf selected (mod (1- selected) (length *options*)))))
      (gamekit:bind-button :enter :pressed
                           (lambda ()
                             (cond
                               ((= selected 0)
                                (gamekit.fistmachine:transition-to 'loading-screen))
                               ((= selected 1)
                                (gamekit:stop)))))))

#+END_SRC

=#'gamekit:pre-destroy= is called once we are leaving the state and in the
process of transitioning into another state. We can release all resources
previously acquired in =#'gamekit:post-initialize= or do any other cleanups.


#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defmethod gamekit.fistmachine:pre-destroy ((this main-menu))
    (gamekit:bind-button :down :pressed nil)
    (gamekit:bind-button :up :pressed nil)
    (gamekit:bind-button :enter :pressed nil))
#+END_SRC

Let's put code to actually draw our menu.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defmethod gamekit:draw ((this main-menu))
    (with-slots (selected) this
      (gamekit:with-pushed-canvas ()
        (gamekit:scale-canvas 2 2)
        (loop for text across *options*
              for i from 0
              do (gamekit:draw-text (if (= i selected)
                                        (format nil "~A~4T~A" "=>" text)
                                        (format nil "~4T~A" text))
                                    (gamekit:vec2 140 (+ 130 (- (* i 20)))))))))

#+END_SRC

**** FISTMACHINE

To enable =fistmachine= plugin we need to add =fistmachine= as a superclass to
our =defgame=. Class of our initial state we must provide in =:initial-state=
default initarg.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (gamekit:defgame fistmachine-example (gamekit.fistmachine:fistmachine) ()
    (:viewport-title "FistMachine Example")
    (:default-initargs :initial-state 'loading-screen))
#+END_SRC

And that's really it. Next we define and export a function to run our example.

#+BEGIN_SRC lisp :tangle example.lisp
  (cl:in-package :trivial-gamekit.fistmachine.example)

  (defun run ()
    (gamekit:start 'fistmachine-example))
#+END_SRC

And run it!
#+BEGIN_SRC lisp :eval on
  (trivial-gamekit.fistmachine.example:run)
#+END_SRC
